{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","boxes","Array","fill","curr","winner","tie","onBox","i","newboxes","newp","setState","checker","tchecker","x","A","y","z","reseter","userReg","e","preventDefault","target","value","board","this","map","box","key","className","onClick","type","name","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOA4HeA,G,iNAvHbC,MAAO,CACLC,MAAQC,MAAM,GAAGC,KAAK,MACtBC,KAAO,KACPC,OAAS,KACTC,KAAM,G,EAGRC,MAAQ,SAACC,GACP,GAA2B,OAAxB,EAAKR,MAAMC,MAAMO,GAAY,CAC9B,IAAMC,EAAS,EAAKT,MAAMC,MAC1BQ,EAASD,GAAK,EAAKR,MAAMI,KACzB,IAAMM,EAA4B,MAApB,EAAKV,MAAMI,KAAc,IAAI,IAC3C,EAAKO,SAAS,CACZV,MAAQQ,EACRL,KAAOM,IAGX,EAAKE,UACL,EAAKC,Y,EAGPA,SAAU,WAER,IADA,IAAIC,EAAE,EACEN,EAAE,EAAIA,EAAE,EAAGA,IACjBM,GAAyB,MAArB,EAAKd,MAAMC,MAAMO,GAEd,IAANM,GACD,EAAKH,SAAS,CACZL,KAAM,K,EAKZM,QAAS,WAWP,IAVA,IAAMG,EAAI,CACR,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAECP,EAAE,EAAIA,EAAE,EAAGA,IAAI,CAAC,IAAD,cACRO,EAAEP,GADM,GACfM,EADe,KACbE,EADa,KACXC,EADW,KAErB,GAAyB,OAAtB,EAAKjB,MAAMC,MAAMa,IAAa,EAAKd,MAAMC,MAAMa,KAAK,EAAKd,MAAMC,MAAMe,IACtE,EAAKhB,MAAMC,MAAMa,KAAK,EAAKd,MAAMC,MAAMgB,GAAG,CACxC,EAAKN,SAAS,CACVN,OAAQ,EAAKL,MAAMI,OAEvB,S,EAIRc,QAAS,WACP,EAAKP,SAAS,CACZV,MAAQC,MAAM,GAAGC,KAAK,MACtBC,KAAO,IACPC,OAAS,KACTC,KAAM,K,EAIVa,QAAS,SAACC,GACRA,EAAEC,iBACF,EAAKV,SAAS,CAACP,KAAOgB,EAAEE,OAAOC,S,wEAExB,IAAD,OAEAC,EAAQC,KAAKzB,MAAMC,MAAMyB,KAC7B,SAACC,EAAInB,GAAL,OACE,yBAAKoB,IAAKpB,EAAGqB,UAAU,MAAMC,QAAS,kBAAI,EAAKvB,MAAMC,KAClDmB,MAIP,OACE,yBAAKE,UAAU,OACf,6BACE,4CACA,6BAG2B,OAApBJ,KAAKzB,MAAMI,KACV,0BAAM0B,QAAS,SAACV,GAAD,OAAK,EAAKD,QAAQC,KAAjC,sBACqB,6BACnB,2BAAOW,KAAK,QAAQC,KAAK,SAAST,MAAM,MAF1C,IAEgD,6BAC9C,2BAAOQ,KAAK,QAAQC,KAAK,SAAST,MAAM,MAH1C,KAGiD,8BAI5B,OAAtBE,KAAKzB,MAAMK,OACV,8CACiBoB,KAAKzB,MAAMK,QAG5BoB,KAAKzB,MAAMM,IAIT,2CAHA,yBAAKuB,UAAU,SACVL,IAOjB,6BACI,6BAAK,6BAEkB,OAApBC,KAAKzB,MAAMI,KACZ,4BAAQ0B,QAASL,KAAKP,SAAtB,aACE,W,GAjHIe,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.381e40e8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n\n  state ={\n    boxes : Array(9).fill(null),\n    curr : null,\n    winner : null,\n    tie : false\n  };\n\n  onBox = (i) =>{\n    if(this.state.boxes[i] === null){\n      const newboxes=this.state.boxes;\n      newboxes[i] = this.state.curr;\n      const newp = (this.state.curr === 'X')?'O':'X';\n      this.setState({\n        boxes : newboxes,\n        curr : newp ,\n      })\n    }\n    this.checker();\n    this.tchecker();\n  }\n\n  tchecker =() =>{\n    let x=0;\n    for(let i=0 ; i<9 ;i++){\n      x+=(this.state.boxes[i]!=null);\n    }\n    if(x === 9){\n      this.setState({\n        tie : true\n      })\n    }\n  }\n\n  checker =() =>{\n    const A = [\n      [0,1,2],\n      [1,4,7],\n      [0,4,8],\n      [0,3,6],\n      [2,5,8],\n      [2,4,6],\n      [3,4,5],\n      [6,7,8]\n    ];\n    for(let i=0 ; i<8 ;i++){\n      const[x,y,z]=A[i];\n      if(this.state.boxes[x]!==null && this.state.boxes[x]===this.state.boxes[y] &&\n        this.state.boxes[x]===this.state.boxes[z]){\n          this.setState({\n              winner :this.state.curr,\n          })\n          break;\n        }\n    }\n  }\n  reseter =() =>{\n    this.setState({\n      boxes : Array(9).fill(null),\n      curr : 'X',\n      winner : null,\n      tie : false\n    })\n  }\n\n  userReg =(e) =>{\n    e.preventDefault();\n    this.setState({curr : e.target.value});\n  }\n  render(){\n   \n    const board = this.state.boxes.map(\n      (box,i) =>\n        <div key={i} className='Box' onClick={()=>this.onBox(i)} >\n          {box}\n        </div>\n    );\n\n    return (\n      <div className=\"App\">\n      <div>\n        <h1>TIC TAC TOE </h1>\n        <br/>\n        \n            {\n              (this.state.curr === null)?\n                <form onClick={(e)=>this.userReg(e)}>\n                  Select your control<br/>\n                  <input type=\"radio\" name=\"gender\" value=\"X\"/>X<br/>\n                  <input type=\"radio\" name=\"gender\" value=\"O\"/> O<br/>\n                  {/* <input type=\"submit\" value=\"Submit\"/> */}\n                </form>\n              :\n              (this.state.winner !== null) ?\n                <div>\n                  The winner is {this.state.winner}\n                </div>\n              : \n              (!this.state.tie)?\n                  <div className='board'>\n                      {board}\n                  </div>\n              :   <h3>\n                    It is a tie\n                  </h3>\n            }\n      </div>\n      <div>\n          <br/><br/>\n          {\n            (this.state.curr !== null)?\n            <button onClick={this.reseter}>Reset All</button>\n            : null\n          }\n      </div>\n      </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}